(module jazz.ui.text.Text-Model jazz
  (import (jazz.designer))
  (import (jazz.geometry))
  (import (jazz.graphic))
  (import (jazz.io))
  (import (jazz.jml))
  (import (jazz.library))
  (import (jazz.library.exemplar))
  (import (jazz.system))
  (import (jazz.ui))
  (import (jazz.ui.skin))
  (import (jazz.ui.view))
  (class Text-Model extends Outline-Model
    (method meta protected override (set-class-form form))
    (method meta protected override (get-class-form))
    (method meta protected override (get-class-forms))
    (method meta protected override (get-class-descriptor (context: context (unspecified))))
    (property protected text accessors generate)
    (property protected wrap? accessors generate)
    (property protected base-format accessors generate)
    (property protected default-format accessors generate)
    (property protected base-style accessors generate)
    (property protected default-style accessors generate)
    (property protected paragraph-spacing <fx> accessors generate)
    (property protected char-encoding accessors generate)
    (property protected eol-encoding accessors generate)
    (property protected propagate-styles? accessors generate)
    (slot protected syntax accessors generate)
    (slot protected undoer <Undoer> getter generate)
    (slot protected user-tabs)
    (slot protected tabs accessors generate)
    (slot protected formats getter generate)
    (slot protected styles getter generate)
    (slot protected wrap-width accessors generate)
    (slot protected wrap-patch accessors generate)
    (method protected override (prepare rest))
    (method protected override (install-child form creator creator-branch restore-form))
    (method protected override (finish rest))
    (method protected virtual (new-syntax) <Text-Syntax>)
    (method protected final (get-paragraphs) <Axis>)
    (method protected final (set-paragraphs lst))
    (method protected override (get-modified?))
    (method protected override (set-modified? state))
    (method protected final (reset-modified?))
    (method protected final (update-status))
    (method protected final (update-moniker-time moniker))
    (method protected final (load-content moniker))
    (method protected final (save-content moniker))
    (method protected override (save-to moniker))
    (method protected final (reload-moniker moniker))
    (method protected final (compare-moniker moniker))
    (method protected virtual (empty-content))
    (method protected override (get-content))
    (method protected override (set-content lst))
    (method public final (empty-text))
    (method protected final (set-unformatted-content lst))
    (method public final (get-string-content) <string>)
    (method public final (set-string-content content <string>) <void>)
    (method protected final (make-string-paragraph format string <string>) <Paragraph>)
    (method protected final (make-paragraph format string <string> runs))
    (method public virtual (read-content moniker))
    (method protected virtual (read-moniker moniker))
    (method public final (reload-content lst))
    (method protected override (content-size-change size <Dimension>))
    (method public final (for-each-logical-range range <Range$Cell$> proc))
    (method public final (for-each-range range <Range$Cell$> proc))
    (method protected final (make-tabs))
    (method public final (make-tabs-from from tab-size number))
    (method protected override (can-undo?))
    (method protected override (can-redo?))
    (method protected override (undo))
    (method protected override (redo))
    (method public final (text-beginning) <Cell>)
    (method public final (text-ending) <Cell>)
    (method public final (text-range) <Range$Cell$>)
    (method public final (text-empty?) <bool>)
    (method public final (get-char pos <Cell>) <char>)
    (method public final (get-string range <Range$Cell$>) <string>)
    (method public final (next! pos <Cell>) <bool>)
    (method public final (previous! pos <Cell>) <bool>)
    (method public final (next-cell pos <Cell>) <Cell+>)
    (method public final (previous-cell pos <Cell>) <Cell+>)
    (method public final (get-range-strings range))
    (method public final (next-pos pos <Cell> offset <fx>) <Cell+>)
    (method public final (previous-pos pos <Cell> offset <fx>) <Cell+>)
    (method public final (get-column line <fx>) <fx>)
    (method protected override (dynamic-scrollee?))
    (method protected override (dynamic-set-scrollee-size))
    (method protected override (scrollee-width))
    (method protected override (scrollee-content-width))
    (method protected final (calculate-scrollee-width))
    (method protected final (calculate-contour-scrollee-width))
    (method protected override (invalidate-update))
    (method public final (get-length) <fx>)
    (method public final (get-limit) <fx>)
    (method public final (get-paragraph line <fx>) <Paragraph>)
    (method public final (paragraph-string line <fx>) <string>)
    (method public final (paragraph-length line <fx>) <fx>)
    (method protected final (paragraph->string paragraph <Paragraph>) <string>)
    (method public final (first-paragraph))
    (method protected override (get-print-area context))
    (method protected final (paginate-range start end page-width page-height))
    (method protected override (setup-printing))
    (method protected override (restore-printing preserved))
    (method protected virtual (draw-enabled?))
    (method protected override (get-drawing-background context))
    (method protected override (get-look))
    (method public final (next-word pos (constituent-test: constituent-test (unspecified))))
    (method public final (previous-word pos (constituent-test: constituent-test (unspecified))))
    (method public virtual (get-constituent-test))
    (method public virtual (text-constituent? char))
    (method public virtual (get-match-test))
    (method public final (move-forward pos word?))
    (method public final (move-backward pos word?))
    (method public final (insert-char range c))
    (method public final (insert-string range str))
    (method public final (insert-newline range))
    (method public final (insert-styled range string style))
    (method public final (insert-link range string (font: font (unspecified)) (anchor: anchor (unspecified)) (action: action (unspecified))))
    (method public final (insert-image range moniker))
    (method public final (insert-view range view/form))
    (method public final (create-table (size: size (unspecified)) (header?: header? (unspecified)) (node-column?: node-column? (unspecified)) (columns: columns (unspecified)) (row-count: row-count (unspecified))))
    (method public final (insert-table range . rest))
    (method public virtual (insert-table-of-content))
    (method protected final (with-adjusted-marks range thunk))
    (method public final (delete-range range))
    (method public final (replace range <Range$Cell$> strings))
    (method protected final (replace-text range <Range$Cell$> strings))
    (method protected final (replace-range range <Range$Cell$> strings))
    (method protected final (invalidate-paragraph paragraph))
    (method protected final (parse-text-content content))
    (method protected final (parse-string-content content))
    (method protected final (parse-markup-content node))
    (method public final (patch-formatted-bug))
    (method protected final (read-formatted moniker))
    (method protected final (save-formatted moniker))
    (method protected final (print-formatted output range <Range$Cell$+>))
    (method public final (get-formatted-content))
    (method public final (set-formatted-content text))
    (method protected final (complete-setup rows count height))
    (method public final (wrap-content context))
    (method protected final (wrap-paragraph context paragraph))
    (method protected final (wrap-paragraph-lowlevel context paragraph))
    (method protected final (range-paragraphs range <Range$Cell$>))
    (method protected final (replace-formatted range <Range$Cell$> info))
    (method protected final (replace-formatted-text range <Range$Cell$> strings formats styles paragraphs))
    (method public final (toggle-bulleted line))
    (method public final (indent-paragraph line paragraph delta))
    (method protected final (set-justification line paragraph justification))
    (method protected final (modify-format paragraph proc))
    (method protected final (set-paragraph-format paragraph format))
    (method public final (apply-style name start (end (unspecified))))
    (method public final (stylize name/style start (end (unspecified))))
    (method public final (stylize-range range <Range$Cell$> style <Style> (layout-scrollee? (unspecified))))
    (method public final (modify-style range <Range$Cell$> proc))
    (method public final (remove-style range))
    (method public final (push-style range style-name))
    (method public final (pop-style range style-name))
    (method public final (set-text-alignment range <Range$Cell$> alignment))
    (method public final (set-text-font range <Range$Cell$> font <Font>))
    (method public final (set-text-style range <Range$Cell$> style <Style>))
    (method public final (set-text-color range <Range$Cell$> color <Color>))
    (method public final (set-highlight-color range <Range$Cell$> color <Color+>))
    (method public final (set-frame-color range <Range$Cell$> color <Color+>))
    (method public final (toggle-bold range <Range$Cell$>))
    (method public final (toggle-italic range <Range$Cell$>))
    (method public final (toggle-underline range <Range$Cell$>))
    (method public final (for-each-paragraph proc (start: start (unspecified)) (end: end (unspecified))))
    (method public final (get-formats-domain))
    (method public final (get-named-formats))
    (method public final (get-interned-formats))
    (method public final (symbolize-format format))
    (method public final (add-format name pref-format) <Format>)
    (method public final (locate-format name/format (error?: error? (unspecified))) <Format>)
    (method public final (intern-format format) <Format>)
    (method protected final (reference-format formats reference))
    (method public final (patch-default-style-height))
    (method public final (get-styles-domain))
    (method public final (get-named-styles))
    (method public final (get-interned-styles))
    (method public final (symbolize-style style))
    (method public final (add-style name pref-style) <Style>)
    (method public final (locate-style name/style (error?: error? (unspecified))) <Style>)
    (method public final (intern-style style) <Style>)
    (method protected final (reference-style styles reference))
    (method public final (comment-style? style))
    (method public final (string-style? style))
    (method public final (textual-style? style))
    (method protected final (make-runs string <string> styles infos))
    (method public final (get-default-height) <fx>)
    (method public final (get-height-at pos <Cell>) <fx>)
    (method public final (compute-width) <fx>)
    (method public final (new-range start end))
    (method public final (range-strings range <Range$Cell$>) <list>)
    (method public final (range-first-string range <Range$Cell$>) <string>)
    (method protected final (position-offset pos <Cell>) <fx>)
    (method protected final (offset-position offset <fx>) <Cell>)
    (method public final (get-format-at pos <Cell>) <Format>)
    (method public final (get-run-at pos <Cell>) <Run+>)
    (method public final (get-style-at pos <Cell>) <Style>)
    (method public final (get-style-at* pos <Cell>) <Style>)
    (method public final (uncolorize-row line <fx>) <void>)
    (method public final (colorize color <Color> start <Cell> (end (unspecified))))
    (method public final (fill color <Color> pos <Cell>) <void>)
    (method public final (unfill pos <Cell>) <void>)
    (method public final (new-colorizer))
    (method protected final (line->view line <fx>) <fx>)
    (method public final (text-regular-search search-context (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))))
    (method public final (text-regular-search-all search-context (start: start (unspecified)) (end: end (unspecified))))
    (method public final (text-search context . rest))
    (method public final (text-search-all context . rest))
    (method protected final (search-context obj (whole-words?: whole-words? (unspecified)) (ignore-case?: ignore-case? (unspecified)))))
  (class Text-Model-Descriptor extends Outline-View-Descriptor
    (method meta protected override (set-class-form form))
    (method meta protected override (get-class-form))
    (method meta protected override (get-class-forms))))
