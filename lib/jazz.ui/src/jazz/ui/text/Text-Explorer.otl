(module jazz.ui.text.Text-Explorer jazz
  (import (jazz.ui))
  (class Text-Explorer extends Explorer
    (slot model <Text-Model> getter generate)
    (slot syntax <Text-Syntax> getter generate)
    (slot paragraphs <Axis>)
    (slot limit <fx>)
    (slot beginning <Cell>)
    (slot ending <Cell>)
    (slot start <Cell>)
    (slot end <Cell>)
    (slot kind <symbol+>)
    (slot line-hook <procedure+> accessors generate)
    (method protected override (initialize mdl <Text-Model> (direction: direction (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (range: range (unspecified))))
    (method protected override (goto-beginning) <void>)
    (method protected final (goto-ending) <void>)
    (method public final (at-beginning?) <bool>)
    (method public final (at-ending?) <bool>)
    (method public final (get-start) <Cell>)
    (method public final (set-start pos <Cell>) <void>)
    (method public final (get-end) <Cell>)
    (method public final (set-end pos <Cell>) <void>)
    (method public final (get-range) <Range$Cell$>)
    (method public final (set-range range <Range$Cell$>) <void>)
    (method public final (set-pos pos <Cell+>) <void>)
    (method protected final (call-line-hook))
    (method public final (looking-at? str <string>))
    (method public final (looking-back? str <string>))
    (method public final (get-kind) <symbol>)
    (method protected final (set-kind knd <symbol+>) <void>)
    (method protected final (get-paragraph n <fx>) <Paragraph>)
    (method protected final (paragraph-string n <fx>) <string>)
    (method protected final (paragraph-length n <fx>) <fx>)
    (method public final (get-char pos <Cell>) <char>)
    (method public final (get-range-string start <Cell> end <Cell>) <string>)
    (method public final (get-marked) <string>)
    (method public final (read-marked))
    (method public final (get-symbol-string) <string>)
    (method public final (find-marked-symbol) <symbol+>)
    (method public final (intern-marked-symbol) <symbol>)
    (method public final (get-range-symbol start end) <symbol+>)
    (method public final (get-mark))
    (method public final (specifier-marked?))
    (method protected final (next! pos <Cell>) <bool>)
    (method protected final (previous! pos <Cell>) <bool>)
    (method protected final (next-cell! pos <Cell>))
    (method protected final (previous-cell! pos <Cell>))
    (method protected final (next-pos pos <Cell> offset <fx>) <Cell+>)
    (method protected final (previous-pos pos <Cell> offset <fx>) <Cell+>)
    (method protected override (forward))
    (method protected final (forward-n offset <fx>))
    (method protected override (backward))
    (method protected final (backward-n offset <fx>))
    (method public final (next-char pos <Cell> offset <fx>) <char+>)
    (method public final (char-forward offset <fx>) <char+>)
    (method public final (previous-char pos <Cell> offset <fx>) <char+>)
    (method public final (char-backward offset <fx>) <char+>)
    (method public final (forward-while predicate <procedure>))
    (method public final (backward-while predicate <procedure>))
    (method public final (forward-until predicate <procedure>))
    (method public final (backward-until predicate <procedure>))
    (method public final (forward-to char))
    (method public final (backward-to char))
    (method public final (forward-whitespaces))
    (method public final (backward-whitespaces))
    (method public final (forward-word))
    (method public final (forward-non-word))
    (method public final (backward-word))
    (method public final (backward-non-word))
    (method protected virtual (forward-constituent))
    (method protected virtual (backward-constituent))
    (method public virtual (outer-expr . rest))
    (method public final (text-constituent? char))
    (method public final (paragraph-start))
    (method public final (paragraph-end))
    (method public final (previous-paragraph))
    (method public final (next-paragraph))
    (method public final (paragraph-column))
    (method public final (backward-style predicate (strict?: strict? (unspecified))))
    (method public final (forward-style predicate (strict?: strict? (unspecified))))
    (method public final (select-style predicate (strict?: strict? (unspecified))))))
