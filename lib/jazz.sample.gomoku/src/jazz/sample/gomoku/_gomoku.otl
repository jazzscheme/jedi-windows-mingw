(module jazz.sample.gomoku jazz
  (export (jazz.sample.gomoku.autoload))
  (import (jazz.sample.game))
  (definition package EMPTY <fx>)
  (definition package BLACK <fx>)
  (definition package WHITE <fx>)
  (definition package Search-Depth)
  (definition package Candidates)
  (class Gomoku-Player extends Player
    (slot game getter generate)
    (slot me getter generate)
    (slot opponent getter generate)
    (method protected override (initialize game me))
    (method protected override (print output readably))
    (method protected final (present)))
  (class Gomoku-Human extends Gomoku-Player
    (method protected override (player-kind)))
  (class Square extends Object
    (slot game getter generate)
    (slot line <fx> getter generate)
    (slot col <fx> getter generate)
    (slot token <fx> accessors generate)
    (slot lines <list> accessors generate)
    (method protected override (initialize game line col))
    (method protected override (print output readably)))
  (definition package (moku-square? size row col))
  (definition package (present-line game line))
  (definition package (present-col game col))
  (definition package (present-move game move))
  (class 5-Line extends Object
    (slot first <Square> getter generate)
    (slot second <Square> getter generate)
    (slot third <Square> getter generate)
    (slot fourth <Square> getter generate)
    (slot fifth <Square> getter generate)
    (method protected override (initialize first second third fourth fifth))
    (method protected final (count-token who <fx>) <fx>))
  (definition package (line=? l1 l2))
  (class Gomoku-Game extends Game
    (slot board-rows accessors generate)
    (slot board-columns accessors generate)
    (slot board-size accessors generate)
    (slot board accessors generate)
    (slot available-moves accessors generate)
    (method protected override (initialize . rest))
    (method protected final (make-board))
    (method protected final (make-availables))
    (method protected final (setup-lines))
    (method protected final (compute-lines square))
    (method protected final (find-next dir row col n))
    (method public final (iterate-board proc))
    (method protected final (board-ref rank) <Square>)
    (method protected final (square-rank row col) <fx>)
    (method protected final (get-square row col) <Square>)
    (method protected final (find-square row col) <Square+>)
    (method protected override (play move token))
    (method protected override (unplay move))
    (method protected override (play-move move))
    (method protected override (win? move token))
    (method protected override (draw? move token))))
