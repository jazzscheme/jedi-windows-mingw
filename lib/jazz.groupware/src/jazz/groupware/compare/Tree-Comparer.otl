(module jazz.groupware.compare.Tree-Comparer jazz
  (import (jazz.groupware))
  (import (jazz.library))
  (class Tree-Comparer extends Object
    (method public final (compare-nodes parent left-node right-node (left-content: left-content (unspecified)) (right-content: right-content (unspecified)) (ignored-nodes: ignored-nodes (unspecified)) (ignored-leaves: ignored-leaves (unspecified)) (ignored-extensions: ignored-extensions (unspecified)) (check-algorithm: check-algorithm (unspecified)) (feedback: feedback (unspecified))))
    (method protected final (compare-node-contents parent node1 content1 node2 content2 ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?))
    (method protected virtual (compare-nodes/leaves nodes leaves))
    (method protected virtual (compare-leaf-values parent leaf1 content1 leaf2 content2 ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?))
    (method protected final (compare-items parent kind items1 content1 items2 content2 ignored-nodes ignored-leaves ignored-extensions proc check-algorithm feedback fact has-differences?))
    (method protected virtual (node-feedback node1 node2 feedback))
    (method protected virtual (leaf-feedback leaf1 leaf2 feedback))
    (method protected final (make-item moniker name value))
    (method protected final (item-name item))
    (method protected virtual (create-item moniker))
    (method protected virtual (get-item-type item))
    (method protected virtual (get-item-content item kind))
    (method protected virtual (different? leaf1 leaf2 check-algorithm))
    (method protected virtual (new-entry parent kind left left-value right right-value))
    (method protected final (collect-items parent node content ignored-nodes ignored-leaves ignored-extensions kind))
    (method protected virtual (collect-item? parent item content ignored-nodes ignored-leaves ignored-extensions))
    (method protected virtual (scanned-values))))
