(module jazz.project.project.Project jazz
  (import (jazz.debugger))
  (import (jazz.designer))
  (import (jazz.git))
  (import (jazz.io))
  (import (jazz.jml))
  (import (jazz.library))
  (import (jazz.library.component))
  (import (jazz.project))
  (import (jazz.system))
  (import (jazz.ui.view))
  (import (jazz.ui))
  (class Project extends Project-File implements Project-Container
    (method meta protected override (set-class-form form))
    (method meta protected override (get-class-form))
    (method meta protected override (get-class-forms))
    (method meta protected override (get-class-descriptor (context: context (unspecified))))
    (property title accessors generate)
    (property icon accessors generate)
    (property owner accessors generate)
    (property copyright accessors generate)
    (property version accessors generate)
    (property include-extensions accessors generate)
    (property documentation accessors generate)
    (property editable? accessors generate)
    (property active? accessors generate)
    (property catalog-extensions accessors generate)
    (property catalog-heuristics accessors generate)
    (property description-file accessors generate)
    (property depot-directory accessors generate)
    (property active-project accessors generate)
    (property active-traits accessors generate)
    (property dynamic? accessors generate)
    (slot catalog accessors generate)
    (slot depot accessors generate)
    (slot dynamic-projects accessors generate)
    (property catalog? accessors generate)
    (method protected override (print output readably))
    (method protected override (finish rest))
    (method protected final (update-dynamic-projects))
    (method public final (dynamic-project?))
    (method public final (get-effective-dynamic-projects))
    (method public final (get-effective-dependencies-file))
    (method public final (update-dynamic-dependencies))
    (method public virtual (project-title))
    (method public final (get-parent-project))
    (method public virtual (concrete?))
    (method public final (project-context))
    (method public final (contextualize-pathname pathname))
    (method protected override (catalog-name))
    (method public final (save-catalogs))
    (method public final (load-catalogs (include-inactives?: include-inactives? (unspecified))))
    (method public final (load-catalog))
    (method public final (require-catalog (report?: report? (unspecified))))
    (method protected final (create-catalog))
    (method protected virtual (catalog-output-base))
    (method protected virtual (catalog-output))
    (method package final (has-content?))
    (method public final (for-each-active-catalog proc))
    (method public virtual (get-effective-editable?))
    (method public final (for-each-project proc (include-self?: include-self? (unspecified)) (include-inactives?: include-inactives? (unspecified)) (include-groups?: include-groups? (unspecified)) (stop-test: stop-test (unspecified))))
    (method public final (fold-projects proc seed (include-inactives?: include-inactives? (unspecified)) (include-groups?: include-groups? (unspecified))))
    (method public final (project-path))
    (method public final (find-project name (use-name?: use-name? (unspecified)) (include-inactives?: include-inactives? (unspecified)) (error?: error? (unspecified))))
    (method public final (require-project name))
    (method public final (for-each-file proc (type (unspecified))))
    (method public final (collect-files (type (unspecified))))
    (method public final (fold-files proc seed (type (unspecified))))
    (method public final (iterate-files proc (extensions: extensions (unspecified))))
    (method public final (iterate-catalog-files proc))
    (method public virtual (project-name))
    (method public virtual (project-action . rest))
    (method public virtual (project-run . rest))
    (method public virtual (run-arguments))
    (method public virtual (project-debug . rest))
    (method public virtual (debug-arguments))
    (method public virtual (project-test . rest))
    (method public virtual (project-validate . rest))
    (method public virtual (project-build))
    (method public virtual (project-clean))
    (method public final (project-depot)))
  (class Project-Descriptor extends Project-File-Descriptor
    (method meta protected override (set-class-form form))
    (method meta protected override (get-class-form))
    (method meta protected override (get-class-forms))
    (method protected override (component-presentation-property? component property))
    (method protected override (component-get-presentation component))
    (method protected override (component-set-presentation component designer presentation))
    (method protected override (component-get-component-image component))
    (method protected override (component-addable-class? component class))
    (method protected override (component-get-categorized-addable-classes component))
    (method protected override (component-property-domain component property))))
