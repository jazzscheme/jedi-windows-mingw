(module jazz.language.runtime.geometry jazz.dialect
  (import (jazz.language.runtime.kernel))
  (import (jazz.language.runtime.format))
  (import (jazz.language.runtime.functional))
  (import (jazz.language.runtime.object))
  (class Cell extends Numeric
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot line <fx> accessors generate)
    (slot col <fx> accessors generate)
    (method protected override (initialize l <fx> c <fx>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (di-compare-object target))
    (method protected override (print output readably))
    (method protected override (numeric-norm))
    (method protected override (numeric-add n))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply n))
    (method protected override (numeric-inverse))
    (method public final (increase-line (delta (unspecified))))
    (method public final (increase-col (delta (unspecified)))))
  (definition public (allocate-cell line <fx> col <fx>))
  (definition public (newcategory<Cell> class <category<Cell>> line col) <Cell>)
  (definition public (copy-cell c <Cell>) <Cell>)
  (definition public (cell=? c1 <Cell> c2 <Cell>) <bool>)
  (definition public (cell<? c1 <Cell> c2 <Cell>) <bool>)
  (definition public (cell<=? c1 <Cell> c2 <Cell>) <bool>)
  (definition public (cell>? c1 <Cell> c2 <Cell>) <bool>)
  (definition public (cell>=? c1 <Cell> c2 <Cell>) <bool>)
  (definition public (cell+ c1 <Cell> c2 <Cell>) <Cell>)
  (definition public (+Cellint c <Cell> n <int>) <Cell>)
  (definition public (cell- c1 <Cell> c2 <Cell>) <Cell>)
  (definition public (-Cellint c <Cell> n <int>) <Cell>)
  (definition public (cell-hash c <Cell>))
  (class Range extends Object
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot start)
    (slot end)
    (method protected override (initialize s e))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method public final (get-start))
    (method public final (get-end))
    (method public virtual (extent))
    (method public virtual (extended?))
    (method public virtual (empty?))
    (method public final (inside? n))
    (method public final (before? n))
    (method public final (after? n))
    (method public final (intersect? range))
    (method public final (intersect range)))
  (definition public (allocate-range start end))
  (definition public (newcategory<Range> class <category<Range>> start end) <Range>)
  (definition public (range=? r1 <Range> r2 <Range>) <bool>)
  (class Range$Cell$ extends Object
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot start <Cell> getter generate)
    (slot end <Cell> getter generate)
    (method protected override (initialize s <Cell> e <Cell>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method public virtual (extent) <Cell>)
    (method public virtual (extended?))
    (method public virtual (empty?))
    (method public final (inside? n <Cell>) <bool>)
    (method public final (before? n <Cell>) <bool>)
    (method public final (after? n <Cell>) <bool>)
    (method public final (intersect? range <Range$Cell$>) <bool>)
    (method public final (intersect range <Range$Cell$>)))
  (definition public (allocate-range$Cell$ start <Cell> end <Cell>))
  (definition public (newcategory<Range$Cell$> class <category<Range$Cell$>> start end) <Range$Cell$>)
  (definition public (=Range$Cell$Range$Cell$ r1 <Range$Cell$> r2 <Range$Cell$>) <bool>)
  (class Point extends Numeric
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot h <fx> getter generate)
    (slot v <fx> getter generate)
    (method protected override (initialize h <fx> v <fx>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method protected override (numeric-norm))
    (method protected override (numeric-add n))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply n))
    (method protected override (numeric-inverse)))
  (definition public (allocate-point h <fx> v <fx>))
  (definition public (newcategory<Point> class <category<Point>> h v) <Point>)
  (definition public (point=? p1 <Point> p2 <Point>) <bool>)
  (definition public (point+ p1 <Point> p2 <Point>) <Point>)
  (definition public (+Pointint p <Point> n <int>) <Point>)
  (definition public (point- p1 <Point> p2 <Point>) <Point>)
  (definition public (-Pointint p <Point> n <int>) <Point>)
  (definition public (-Point p <Point>) <Point>)
  (definition public (point* p <Point> n <int>) <Point>)
  (class Point$fl$ extends Numeric
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot h <fl> getter generate)
    (slot v <fl> getter generate)
    (method protected override (initialize h <fl> v <fl>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method protected override (numeric-norm))
    (method protected override (numeric-add n))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply n))
    (method protected override (numeric-inverse)))
  (class Distance extends Numeric
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot x <fx> getter generate)
    (slot y <fx> getter generate)
    (method protected override (initialize x <fx> y <fx>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method protected override (numeric-norm))
    (method protected override (numeric-add n))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply n))
    (method protected override (numeric-inverse)))
  (definition public (allocate-distance x <fx> y <fx>))
  (definition public (newcategory<Distance> class <category<Distance>> x y) <Distance>)
  (definition public (distance=? d1 <Distance> d2 <Distance>) <bool>)
  (definition public (distance+ d1 <Distance> d2 <Distance>) <Distance>)
  (definition public (distance- d1 <Distance> d2 <Distance>) <Distance>)
  (definition public (-Distance d <Distance>) <Distance>)
  (definition public (distance* d <Distance> n <int>) <Distance>)
  (definition public (distance-min d1 <Distance> d2 <Distance>) <Distance>)
  (definition public (distance-max d1 <Distance> d2 <Distance>) <Distance>)
  (class Dimension extends Numeric
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (slot width <fx> getter generate)
    (slot height <fx> getter generate)
    (method protected override (initialize w <fx> h <fx>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably))
    (method protected override (numeric-norm))
    (method protected override (numeric-add n))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply n))
    (method protected override (numeric-inverse)))
  (definition public (allocate-dimension width <fx> height <fx>))
  (definition public (newcategory<Dimension> class <category<Dimension>> width height) <Dimension>)
  (definition public (dimension=? d1 <Dimension> d2 <Dimension>) <bool>)
  (definition public (dimension+ d1 <Dimension> d2 <Dimension>) <Dimension>)
  (definition public (dimension- d1 <Dimension> d2 <Dimension>) <Dimension>)
  (definition public (dimension* d <Dimension> n <int>) <Dimension>)
  (definition public (dimension-min d1 <Dimension> d2 <Dimension>) <Dimension>)
  (definition public (dimension-max d1 <Dimension> d2 <Dimension>) <Dimension>)
  (class Rect extends Object
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (method meta protected override (coerce-object object))
    (slot left <fx> accessors generate)
    (slot top <fx> accessors generate)
    (slot right <fx> accessors generate)
    (slot bottom <fx> accessors generate)
    (method protected override (initialize l <fx> t <fx> r <fx> b <fx>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably)))
  (definition public (rect? obj))
  (definition public (allocate-rect left <fx> top <fx> right <fx> bottom <fx>))
  (definition public (newcategory<Rect> class <category<Rect>> left top right bottom) <Rect>)
  (definition public (rect=? r1 <Rect> r2 <Rect>) <bool>)
  (definition public (empty-rect? rect))
  (definition public (empty-rect$fl$? rect))
  (class Rect$fl$ extends Object
    (method meta protected override (marshall-object object))
    (method meta protected override (unmarshall-object content))
    (method meta protected override (coerce-object object))
    (slot left <fl> accessors generate)
    (slot top <fl> accessors generate)
    (slot right <fl> accessors generate)
    (slot bottom <fl> accessors generate)
    (method protected override (initialize l <fl> t <fl> r <fl> b <fl>))
    (method protected override (copy-object deep?))
    (method protected override (compare-object target))
    (method protected override (print output readably)))
  (definition public (rect$fl$? obj))
  (definition public (allocate-rect$fl$ left <fl> top <fl> right <fl> bottom <fl>))
  (definition public (newcategory<Rect$fl$> class <category<Rect$fl$>> left top right bottom) <Rect$fl$>)
  (definition public (rect$fl$=? r1 <Rect$fl$> r2 <Rect$fl$>) <bool>)
  (definition public (point->distance pt <Point>) <Distance>)
  (definition public (point->dimension pt <Point>) <Dimension>)
  (definition public (distance->point dist <Distance>) <Point>)
  (definition public (distance->dimension dist <Distance>) <Dimension>)
  (definition public (dimension->point dim <Dimension>) <Point>)
  (definition public (dimension->distance dim <Dimension>) <Distance>))
