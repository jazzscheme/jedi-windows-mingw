(module jazz.language.runtime.functional jazz.dialect
  (import (jazz.language.runtime.kernel))
  (import (jazz.language.runtime.object))
  (import (irregex))
  (class Module extends Object
    (slot name getter generate)
    (slot access getter generate)
    (slot exports getter generate)
    (slot entries getter generate))
  (class Field extends Object
    (slot name getter generate)
    (method protected override (print output detail))
    (method protected virtual (field-locator))
    (method protected virtual (field-ref))
    (method protected virtual (field-set! value)))
  (class Native extends Field
    (slot symbol getter generate)
    (method protected override (field-locator))
    (method protected override (field-ref))
    (method protected override (field-set! value)))
  (class Runtime-Reference extends Object
    (slot resolver getter generate)
    (slot serialization getter generate))
  (class Define extends Field
    (slot locator getter generate)
    (method protected override (field-locator))
    (method protected override (field-ref))
    (method protected override (field-set! value)))
  (class Definition extends Field
    (slot locator getter generate)
    (method protected override (field-locator))
    (method protected override (field-ref))
    (method protected override (field-set! value)))
  (class Type extends Object
    (method protected virtual (of-type? object))
    (method protected virtual (of-subtype? subtype))
    (method protected virtual (specifiable?))
    (method protected virtual (category-type?))
    (method protected virtual (emit-specifier))
    (method protected virtual (emit-type source-declaration environment backend))
    (method protected virtual (emit-test value source-declaration environment backend))
    (method protected virtual (emit-check value source-declaration environment backend)))
  (class Category extends Type
    (slot identifier getter generate)
    (slot fields getter generate)
    (slot virtual-size getter generate)
    (slot ancestors getter generate)
    (slot descendants getter generate)
    (method protected virtual (update-category))
    (method protected override (print output detail))
    (method public final (get-name))
    (method public virtual (mop-category-field field-name))
    (method public virtual (mop-field-value property)))
  (definition public (typed? obj category-identifier))
  (class Class extends Category
    (slot ascendant getter generate)
    (slot interfaces getter generate)
    (slot slots getter generate)
    (slot instance-slots getter generate)
    (slot instance-size getter generate)
    (slot level getter generate)
    (slot virtual-names getter generate)
    (slot class-table getter generate)
    (slot interface-table getter generate)
    (method public virtual (coerce-object obj))
    (method public virtual (external-name (error?: error? (unspecified))))
    (method public virtual (marshall-object object))
    (method public virtual (unmarshall-object content))
    (method public virtual (mop-instance-slots object)))
  (class Object-Class metaclass Class extends Class)
  (definition public (class? obj))
  (definition public (instance-of? obj class))
  (definition public (coerce object <Object> class <Class>))
  (class Interface extends Category
    (slot ascendants getter generate)
    (slot rank getter generate))
  (class Method extends Field
    (slot dispatch-type getter generate)
    (slot implementation getter generate)
    (slot implementation-tree getter generate)
    (slot category-rank getter generate)
    (slot implementation-rank getter generate))
  (definition public (object-method object name))
  (class Method-Node extends Object
    (slot category getter generate)
    (slot implementation getter generate)
    (slot next-node getter generate)
    (slot next-implementation getter generate)
    (slot children getter generate))
  (class Call-Site extends Object
    (slot name accessors generate)
    (slot parent accessors generate)
    (slot properties accessors generate)
    (slot procedure accessors generate)
    (slot profile accessors generate)
    (method protected override (print output detail)))
  (class Queue extends Object
    (slot head getter generate)
    (slot public tail getter generate)
    (slot shared getter generate))
  (class Generic extends Object
    (slot locator getter generate)
    (slot name getter generate)
    (slot root-specific getter generate)
    (slot pending-specifics getter generate))
  (class Specific extends Object
    (slot dynamic-signature getter generate)
    (slot implementation getter generate)
    (slot ancestor-specifics getter generate)
    (slot descendant-specifics getter generate))
  (class Boolean-Class extends Class)
  (class Boolean metaclass Boolean-Class extends Object
    (method protected override (initialize . rest)))
  (definition public (/= x y))
  (definition public (neq? x y))
  (definition public (xor x y))
  (definition public (nu=? n m . rest))
  (definition public (nu/=? n m . rest))
  (definition public (nu<? n m . rest))
  (definition public (nu<=? n m . rest))
  (definition public (nu>? n m . rest))
  (definition public (nu>=? n m . rest))
  (definition public (ci=? . rest))
  (definition public (ci/=? . rest))
  (definition public (ci<? n . rest))
  (definition public (ci<=? n . rest))
  (definition public (ci>? n . rest))
  (definition public (ci>=? n . rest))
  (definition public (di=? x y))
  (definition public (di<? x y))
  (definition public (di<=? x y))
  (definition public (di>? x y))
  (definition public (di>=? x y))
  (definition public (di-sort-ascending seq (key: key (unspecified))))
  (definition public (di-sort-descending seq (key: key (unspecified))))
  (definition public (boolean->integer bool))
  (definition public (integer->boolean n <int>))
  (definition public false)
  (definition public (false? obj))
  (definition public true)
  (definition public (true? obj))
  (definition public (truth? obj))
  (definition public (boolean->truth bool))
  (definition public (truth->boolean data))
  (definition public Whitespace-Chars)
  (definition public Uppercase-Chars)
  (definition public Lowercase-Chars)
  (definition public Alphabetic-Chars)
  (definition public Numeric-Chars)
  (definition public (diacritic-equivalent c))
  (class Char-Class extends Class)
  (class Char metaclass Char-Class extends Object
    (method protected override (initialize . rest))
    (method protected override (coerce-string))
    (method protected override (compare-object c))
    (method protected override (ci-compare-object c))
    (method protected override (di-compare-object c))
    (method protected override (object-similar? object))
    (method protected override (object-alphabetic?))
    (method protected override (object-numeric?))
    (method protected override (object-alphanumeric?))
    (method protected override (object-whitespace?))
    (method protected override (object-upper-case?))
    (method protected override (object-lower-case?))
    (method protected override (object-upcase))
    (method protected override (object-downcase))
    (method protected override (object-capitalize)))
  (definition public (char-presentation char))
  (definition public (alphabetic? object <Object>))
  (definition public (numeric? object <Object>))
  (definition public (alphanumeric? object <Object>))
  (definition public (whitespace? object <Object>))
  (definition public (upper-case? object <Object>))
  (definition public (lower-case? object <Object>))
  (definition public (upcase object <Object>))
  (definition public (downcase object <Object>))
  (definition public (capitalize object <Object>))
  (definition public (vowel? c))
  (definition public (character-type ascii-c <char>) <symbol>)
  (definition public (invalid-character? c <char>) <bool>)
  (definition public (word-constituent? c <char>) <bool>)
  (definition public (scheme-constituent? c <char>) <bool>)
  (definition public (jazz-constituent? c <char>) <bool>)
  (definition public (c-constituent? c <char>) <bool>)
  (definition public (sql-constituent? c <char>) <bool>)
  (class Port-Class extends Class)
  (class Port metaclass Port-Class extends Object
    (method protected override (initialize . rest))
    (method protected override (destroy)))
  (class Symbol-Class extends Class)
  (class Symbol metaclass Symbol-Class extends Object
    (method protected override (initialize . rest))
    (method protected override (coerce-string))
    (method protected override (compare-object obj))
    (method protected override (ci-compare-object obj)))
  (definition public (=symbolsymbol s1 <symbol> s2 <symbol>) <bool>)
  (definition public (generated-symbol? symbol))
  (definition public (symbol->keyword symbol))
  (definition public (keyword->symbol keyword))
  (definition public (find-symbol str))
  (definition public (symbol-bound? name . rest))
  (definition public (symbol-unbound? name . rest))
  (class Keyword-Class extends Class)
  (class Keyword metaclass Keyword-Class extends Object
    (method protected override (initialize . rest)))
  (definition public (find-keyword keyword box default (allow-other-keys? (unspecified))))
  (definition package (box-list lst))
  (definition package (unbox-list box))
  (class Continuation-Class extends Class)
  (class Continuation metaclass Continuation-Class extends Object)
  (class Procedure-Class extends Class)
  (class Procedure metaclass Procedure-Class extends Object)
  (class Foreign-Class extends Class)
  (class Foreign metaclass Foreign-Class extends Object)
  (class Numeric-Class extends Class)
  (class Numeric metaclass Numeric-Class extends Object
    (method public virtual (numeric-norm))
    (method public virtual (numeric-add obj))
    (method public virtual (numeric-negate))
    (method public virtual (numeric-multiply n))
    (method public virtual (numeric-inverse)))
  (class Number-Class extends Numeric-Class)
  (class Number metaclass Number-Class extends Numeric
    (method protected override (initialize . rest))
    (method protected override (compare-object obj))
    (method protected override (ci-compare-object obj))
    (method protected override (di-compare-object obj))
    (method protected override (numeric-norm))
    (method protected override (numeric-add obj))
    (method protected override (numeric-negate))
    (method protected override (numeric-multiply obj))
    (method protected override (numeric-inverse)))
  (class Complex-Class extends Number-Class)
  (class Complex metaclass Complex-Class extends Number
    (method protected override (numeric-norm)))
  (class Real-Class extends Complex-Class)
  (class Real metaclass Real-Class extends Complex)
  (class Rational-Class extends Real-Class)
  (class Rational metaclass Rational-Class extends Real)
  (definition public (rational->decimalstring fraction precision))
  (class Integer-Class extends Rational-Class)
  (class Integer metaclass Integer-Class extends Rational)
  (class Fixnum-Class extends Integer-Class)
  (class Fixnum metaclass Fixnum-Class extends Integer)
  (class Flonum-Class extends Real-Class)
  (class Flonum metaclass Flonum-Class extends Real)
  (definition public (fl x) <fl>)
  (definition public (fl+ x <fl> y <fl>) <fl>)
  (definition public (fl- x <fl> y <fl>) <fl>)
  (definition public (fl* x <fl> y <fl>) <fl>)
  (definition public (fl/ x <fl> y <fl>) <fl>)
  (definition public (flmodulo x <fl> y <fl>) <fl>)
  (definition public (relate x y) <fx>)
  (definition public (sign n) <fx>)
  (definition public (nu+ . rest))
  (definition public (nu- n <Numeric> . rest))
  (definition public (nu* . rest))
  (definition public (nu/ n <Numeric> . rest))
  (definition public (minimum lst <pair> (key: key (unspecified)) (compare: compare (unspecified))))
  (definition public (maximum lst <pair> (key: key (unspecified)) (compare: compare (unspecified))))
  (definition public (between? n lower upper))
  (definition public (between lower n upper))
  (definition public (in-interval? n lower upper))
  (definition public (norm x <Numeric>))
  (definition public (distance start <Numeric> end <Numeric>))
  (definition public (near? x y distance) <bool>)
  (definition public (contiguous-range lst))
  (definition public (naturals lower <int> upper <int>) <list>)
  (definition public (lobyte word <int>) <int>)
  (definition public (hibyte word <int>) <int>)
  (definition public (make-word lo <int> hi <int>) <int>)
  (definition public (lochar word <int>) <int>)
  (definition public (hichar word <int>) <int>)
  (definition public (make-int lo <int> hi <int>) <int>)
  (definition public (loword dword <int>) <int>)
  (definition public (hiword dword <int>) <int>)
  (definition public (signed-loword dword <int>) <int>)
  (definition public (signed-hiword dword <int>) <int>)
  (definition public (sign-word word <int>) <int>)
  (definition public (separate int1 <int> int2 <int>))
  (definition public (randomize))
  (definition public (random n))
  (definition public (bit-set num <int> pos <int> bit <bool>) <int>)
  (definition public (mask-bit-set num <int> msk <int> bit <bool>) <int>)
  (definition public (mask-bit-set? num <int> msk <int>) <bool>)
  (definition public (bit-mask hi <int> lo <int>))
  (definition public (random-seed (seed (unspecified))))
  (definition public (sqr num))
  (definition public (percentage part <real> total <real>) <real>)
  (definition public (percent percent <real> n <real>) <real>)
  (definition public (fxfloor r <fl>) <fx>)
  (definition public (fxceiling r <fl>) <fx>)
  (definition public (fxtruncate r <fl>) <fx>)
  (definition public (fxround r <fl>) <fx>)
  (definition public (fxfloor/ n <fx> d <fx>) <fx>)
  (definition public (fxceiling/ n <fx> d <fx>) <fx>)
  (definition public (fxtruncate/ n <fx> d <fx>) <fx>)
  (definition public (fxround/ n <fx> d <fx>) <fx>)
  (class Iterator extends Object
    (slot peeked)
    (method protected override (iterate-object))
    (method public virtual (get-next))
    (method public virtual (peek))
    (method public virtual (unget object))
    (method public virtual (next))
    (method public virtual (done?) <bool>)
    (method public virtual (get-next!))
    (method public virtual (put object))
    (method public virtual (get-position))
    (method public virtual (set-position pos))
    (method public virtual (get-state))
    (method public virtual (reset-state old)))
  (definition public (iterate-sequence obj <Object>) <Iterator>)
  (class Explorer extends Iterator
    (slot direction setter generate)
    (method protected virtual (peek-forward))
    (method protected virtual (peek-backward))
    (method protected override (peek))
    (method public virtual (goto-beginning))
    (method public virtual (goto-end))
    (method public virtual (forward))
    (method public virtual (backward))
    (method protected override (next))
    (method protected virtual (done-forward?))
    (method protected virtual (done-backward?))
    (method protected override (done?))
    (method protected virtual (put-forward object))
    (method protected virtual (put-backward object))
    (method protected override (put object)))
  (definition public (explore object <Object> . rest) <Explorer>)
  (class Sequence-Class extends Class
    (method public virtual (make-sequence len <int>))
    (method protected override (coerce-object seq)))
  (class Sequence metaclass Sequence-Class extends Object
    (method protected override (coerce-string))
    (method protected override (compare-object seq))
    (method protected override (di-compare-object seq))
    (method protected override (copy-object deep? <bool>))
    (method protected override (iterate-object))
    (method protected override (object-alphabetic?))
    (method protected override (object-numeric?))
    (method protected override (object-alphanumeric?))
    (method protected override (object-whitespace?))
    (method protected override (object-upper-case?))
    (method protected override (object-lower-case?))
    (method protected override (object-upcase))
    (method protected override (object-downcase))
    (method protected override (object-capitalize))
    (method protected virtual (sequence-element n <fx>))
    (method protected virtual (sequence-set-element! n <fx> obj) <void>)
    (method protected virtual (sequence-cardinality) <fx>)
    (method protected virtual (sequence-tail start))
    (method protected virtual (sequence-last))
    (method protected virtual (sequence-butlast))
    (method protected virtual (sequence-subseq! start <fx> end <fx>))
    (method protected virtual (sequence-replace-subseq! start <fx> end <fx> replacement)))
  (definition public (sequence? obj))
  (definition public (element seq <Sequence> n <int>))
  (definition public (set-element! seq <Sequence> n <int> obj) <void>)
  (definition public (cardinality seq <Sequence>) <int>)
  (definition public (empty? seq))
  (definition public (tail seq <Sequence> start))
  (definition public (last seq <Sequence>))
  (definition public (butlast seq <Sequence>))
  (definition public (compare-sequence s1 s2 compare))
  (definition public (skip-whitespace seq <Sequence> (start: start (unspecified))))
  (definition public (subseq seq start (end (unspecified)) (type (unspecified))))
  (definition public (replace-subseq! seq <Sequence> start end replacement))
  (definition public (subseq! seq <Sequence> start (end (unspecified))))
  (definition public (sort test seq (key: key (unspecified))))
  (definition public (first seq))
  (definition public (second seq))
  (definition public (third seq))
  (definition public (fourth seq))
  (definition public (fifth seq))
  (definition public (sixth seq))
  (definition public (seventh seq))
  (definition public (eighth seq))
  (definition public (ninth seq))
  (definition public (tenth seq))
  (definition public (set-first! seq value))
  (definition public (set-second! seq value))
  (definition public (set-third! seq value))
  (definition public (set-fourth! seq value))
  (definition public (set-fifth! seq value))
  (definition public (set-sixth! seq value))
  (definition public (set-seventh! seq value))
  (definition public (set-eighth! seq value))
  (definition public (set-ninth! seq value))
  (definition public (set-tenth! seq value))
  (definition public (element-reversed seq n))
  (definition public (iterate seq proc <procedure>))
  (definition public (iterate-sequences proc <procedure> . seqs))
  (definition public (accumulate seq proc <procedure> (type (unspecified))))
  (definition public (gather iterable <Object> (type: type (unspecified))))
  (definition public (collect proc <procedure> seq <Object> (key: key (unspecified)) (type: type (unspecified))))
  (definition public (collect-if predicate <procedure> seq <Object> (key: key (unspecified))))
  (definition public (collect-type type seq <Object> (key: key (unspecified))))
  (definition public (collect-sections lst (separator: separator (unspecified)) (test: test (unspecified))))
  (definition public (count target <Object> seq <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (count-if predicate <procedure> seq (key: key (unspecified))))
  (definition public (count-type type seq <Object> (key: key (unspecified))))
  (definition public (find seq target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (reversed?: reversed? (unspecified)) (return: return (unspecified))))
  (definition public (find-object proc <procedure> seq <Object> (key: key (unspecified))))
  (definition public (find-in seq target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (reversed?: reversed? (unspecified))))
  (definition public (find-balanced open close seq (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (reversed?: reversed? (unspecified)) (return: return (unspecified))))
  (definition public (find-if predicate <procedure> seq <Object> (key: key (unspecified)) (start: start (unspecified)) (reversed?: reversed? (unspecified)) (return: return (unspecified))))
  (definition public (get-rank target <Object> seq <Object> (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (reversed?: reversed? (unspecified))))
  (definition public (skip predicate <procedure> seq <Object> (key: key (unspecified)) (start: start (unspecified))))
  (definition public (append-map proc <procedure> list1 . lists))
  (definition public (zip list1 . lists))
  (definition public (iota count (start (unspecified)) (step (unspecified))))
  (definition public (fold-left kcons knil lst))
  (definition public (fold-right kcons knil lst))
  (definition public (unfold-right stop? <procedure> seed->elem <procedure> next <procedure> seed (tail (unspecified))))
  (definition public (some? predicate <procedure> (key: key (unspecified)) . seqs))
  (definition public (every? predicate <procedure> (key: key (unspecified)) . seqs))
  (definition public (concatenate . rest))
  (definition public (concatenate! . rest))
  (definition public (subset? set1 set2))
  (definition public (union (key: key (unspecified)) (test: test (unspecified)) . lists))
  (definition public (intersection (test: test (unspecified)) . lists))
  (definition public (difference x <Object> y <Object> (test: test (unspecified))))
  (definition public (set-xor x <Object> y <Object> (test: test (unspecified))))
  (definition public (remove target <Object> seq <Object> (test: test (unspecified))))
  (definition public (string-remove target <char> str <string>) <string>)
  (definition public (extract-trailer seq <Object> predicate <procedure>))
  (definition public (remove-leading target <Object> seq <Object> (test: test (unspecified))))
  (definition public (remove-trailing target <Object> seq <Object> (test: test (unspecified))))
  (definition public (remove-enclosing target <Object> seq <Object> (test: test (unspecified))))
  (definition public (remove-duplicates seq <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (collect-duplicates seq <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (remove-false seq <Object>))
  (definition public (remove-empty seq <Object>))
  (definition public (trim-spaces seq))
  (definition public (trim-whitespace seq))
  (definition public (mismatch target <Object> seq <Object> (test: test (unspecified))))
  (definition public (prefix sequences <Object> (test: test (unspecified))))
  (definition public (prefix? target <Object> seq <Object>))
  (definition public (copy-into! seq1 seq2))
  (class Search-Context extends Object
    (slot target <Sequence> accessors generate)
    (slot whole-words? <bool> accessors generate)
    (slot ignore-case? <bool> accessors generate)
    (slot ignore-diacritic? <bool> accessors generate)
    (slot regexp? <bool> accessors generate)
    (slot match-test <procedure+> accessors generate)
    (slot constituent-test <procedure+> accessors generate)
    (slot regexp accessors generate)
    (slot user-data accessors generate)
    (method protected override (print output detail)))
  (class Search-Set extends Object
    (slot regexp accessors generate)
    (slot contexts <list> accessors generate))
  (definition public (->search-context obj))
  (definition public (make-search-context target (whole-words?: whole-words? (unspecified)) (ignore-case?: ignore-case? (unspecified)) (ignore-diacritic?: ignore-diacritic? (unspecified)) (regexp?: regexp? (unspecified)) (match-test: match-test (unspecified)) (constituent-test: constituent-test (unspecified)) (user-data: user-data (unspecified))))
  (definition public (->search-set obj) <Search-Set>)
  (definition public (allocate-search-set regexp contexts))
  (definition public (search-context-regexp context <Search-Context>))
  (definition public (regular-search seq <Sequence> target (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified)) (match-test: match-test (unspecified)) (constituent-test: constituent-test (unspecified))))
  (definition public (regular-search-all seq <Sequence> target (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified)) (match-test: match-test (unspecified)) (constituent-test: constituent-test (unspecified))))
  (definition public (search seq <Sequence> target <Object> (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified)) (whole-words?: whole-words? (unspecified)) (ignore-case?: ignore-case? (unspecified)) (ignore-diacritic?: ignore-diacritic? (unspecified)) (regexp?: regexp? (unspecified)) (match-test: match-test (unspecified)) (constituent-test: constituent-test (unspecified))) <int+>)
  (definition public (search-all seq <Sequence> target <Object> (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified)) (whole-words?: whole-words? (unspecified)) (ignore-case?: ignore-case? (unspecified)) (ignore-diacritic?: ignore-diacritic? (unspecified)) (regexp?: regexp? (unspecified)) (match-test: match-test (unspecified)) (constituent-test: constituent-test (unspecified))) <list>)
  (definition public (split seq <Object> separator <Object>) <list>)
  (definition public (split-justified seq <Object> width separators <Object> (column: column (unspecified))))
  (definition public (join sequences <Object> separator <Object>))
  (definition public (join-symbols symbols separator))
  (definition public (inject sequence inserted))
  (definition public (substitute old-value <Object> new-value <Object> seq <Object> (key: key (unspecified)) (test: test (unspecified)) (sequence?: sequence? (unspecified))))
  (definition public (substitute-alist replacements <Object> seq <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (fill! seq object (start: start (unspecified))))
  (definition public (replace! seq replacement (start: start (unspecified))))
  (definition public (ordered-position object seq (key: key (unspecified)) (test: test (unspecified))))
  (definition public (insert-ordered! object seq (key: key (unspecified)) (test: test (unspecified))))
  (definition public (merge-ordered proc x y (key: key (unspecified)) (left-key: left-key (unspecified)) (right-key: right-key (unspecified)) (compare: compare (unspecified)) (case-insensitive?: case-insensitive? (unspecified))))
  (definition public (merge proc lists (key: key (unspecified)) (compare: compare (unspecified))))
  (definition public (next-element seq elem (key: key (unspecified)) (test: test (unspecified)) (cycle?: cycle? (unspecified))))
  (definition public (previous-element seq elem (key: key (unspecified)) (test: test (unspecified)) (cycle?: cycle? (unspecified))))
  (definition public (random-element seq))
  (definition public (partition sequence (key: key (unspecified)) (test: test (unspecified))))
  (definition public (partition-binary lst predicate))
  (definition public (starts-with? seq target (test: test (unspecified)) (ignore-case?: ignore-case? (unspecified))) <bool>)
  (definition public (ends-with? seq target (test: test (unspecified)) (ignore-case?: ignore-case? (unspecified))) <bool>)
  (definition public (for-each-reversed proc lst))
  (definition public (insert-sequence! sequence pos seq))
  (class Sequence-Explorer extends Explorer
    (slot sequence <Sequence>)
    (slot sequence-cardinality <fx>)
    (slot current <fx>)
    (method protected override (initialize seq (direction: direction (unspecified)) (start: start (unspecified))))
    (method protected override (peek-forward))
    (method protected override (peek-backward))
    (method protected override (goto-beginning))
    (method protected override (goto-end))
    (method protected override (forward))
    (method protected override (backward))
    (method protected override (done-forward?))
    (method protected override (done-backward?))
    (method protected override (put-forward object <Object>))
    (method protected override (put-backward object <Object>))
    (method protected override (get-position))
    (method protected override (set-position pos <fx>))
    (method protected override (get-state))
    (method protected override (reset-state state <fx>)))
  (class List-Class extends Sequence-Class
    (method protected override (make-sequence len))
    (method protected override (coerce-object seq)))
  (class List metaclass List-Class extends Sequence
    (method protected override (initialize . rest))
    (method protected override (copy-object deep?))
    (method protected override (iterate-object))
    (method protected override (sequence-element n))
    (method protected override (sequence-set-element! n <fx> obj) <void>)
    (method protected override (sequence-cardinality) <fx>)
    (method protected override (sequence-tail n))
    (method protected override (sequence-last))
    (method protected override (sequence-butlast))
    (method protected override (sequence-subseq! start end))
    (method protected final (replace-subseq! start end seq)))
  (class Null-Class extends List-Class)
  (class Null metaclass Null-Class extends List
    (method protected override (compare-object obj))
    (method protected override (di-compare-object obj)))
  (class Pair-Class extends List-Class)
  (class Pair metaclass Pair-Class extends List
    (method protected override (compare-object obj))
    (method protected override (di-compare-object obj))
    (method protected override (walk-references proc))
    (method protected override (setup-context context)))
  (definition public (elementlist list <list> n))
  (definition public (cardinalitylist list <list>) <int>)
  (definition public (insert! seq pos obj))
  (definition public (atom? value))
  (definition public (null/pair? obj))
  (definition public (one-element? obj))
  (definition public (last-tail lst))
  (definition public (make-list n . rest))
  (definition public (list-set! list n value))
  (definition public (set-cadr! pair value))
  (definition public (append! . rest))
  (definition public (position target lst (key: key (unspecified)) (test: test (unspecified))))
  (definition public (copy-tree tree))
  (definition public (position-of obj lst))
  (definition public (proper-list? lst))
  (definition public (proper-length l))
  (definition public (last-cdr lst))
  (definition public (butlast-cdr lst))
  (definition public (move-to-head! target lst))
  (definition public (move-to-tail! target lst))
  (definition public (augment . rest))
  (definition public (memq? target <Object> list <Object>))
  (definition public (memv? target <Object> list <Object>))
  (definition public (member? target <Object> list <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (assq-value key list default-value))
  (definition public (assv-value key list default-value))
  (definition public (assoc-value key list default-value))
  (definition public (associate target <Object> list <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (rassociate target <Object> list <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (find-pair target <Object> list <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (reverse! list <Object>))
  (definition public (remove! target <Object> list <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (getprop plist <Object> target <Object> (key: key (unspecified)) (test: test (unspecified))))
  (definition public (plist-remove plist keyword))
  (definition public (plist-add plist keyword value))
  (definition public (getf plist <Object> target <Object> (key: key (unspecified)) (test: test (unspecified)) (not-found: not-found (unspecified))))
  (definition public (setf plist <Object> target <Object> value <Object>))
  (definition public (addf plist <Object> target <Object> value <Object>))
  (definition public (for-each-pair proc lst))
  (definition public (for-each-property proc lst))
  (definition public (map-property proc lst))
  (definition public (flatten llist))
  (definition public (uniform lst (key: key (unspecified)) (test: test (unspecified))))
  (definition public (sort-property-list prop-list <Object>))
  (definition public (plist->alist ls))
  (definition public (alist->plist ls))
  (class List-Iterator extends Iterator
    (slot current)
    (slot public position)
    (method protected override (initialize list <list>))
    (method protected override (get-next!))
    (method protected override (done?))
    (method protected override (put object))
    (method protected override (get-position))
    (method protected override (set-position pos))
    (method protected override (get-state))
    (method protected override (reset-state state))
    (method public final (get-list)))
  (class List-Factory extends Object
    (slot list getter generate)
    (slot last-list)
    (slot last-anchor)
    (slot current)
    (slot size <fx> getter generate)
    (method protected final (put object <Object>))
    (method protected final (put-unique object (test: test (unspecified))))
    (method protected final (put-sequence seq <Object>))
    (method public final (is-empty?))
    (method public final (get-last-element))
    (method protected final (get-output))
    (method public final (reset)))
  (class Table extends Object
    (method protected override (initialize . rest))
    (method protected override (print output readably)))
  (definition public (table-add table <table> key value))
  (definition public (table-remove! table <table> name value))
  (definition public (empty-table table <table>))
  (definition public (table-keys table <table>))
  (definition public (table-values table <table>))
  (definition public (table-keys/values table <table>))
  (definition public (table-find table <table> value (test: test (unspecified))))
  (definition public (table-load table <table> input error-on-duplicates?))
  (definition public (serialize-reference reference))
  (definition public (serialize-class class))
  (definition public (serialize-object class content))
  (definition public (deserialize-class reference))
  (class Slot extends Field
    (slot offset getter generate)
    (slot initialize getter generate))
  (class Property extends Slot
    (slot getter getter generate)
    (slot setter getter generate))
  (definition public (property? obj))
  (definition public (symbolize-property property <Object>))
  (definition public (symbolize-properties properties <Object>))
  (definition public (keywordize-property property <Object>))
  (definition public (keywordize-properties properties <Object>))
  (definition public (read-property object <Object> expr <Object>))
  (definition public (write-property object <Object> expr <Object> value <Object>))
  (definition public (property-field class <Class> expr <Object>))
  (definition public (property-field? class <Class> symbol <symbol>))
  (class String-Class extends Sequence-Class
    (method protected override (make-sequence len))
    (method protected override (coerce-object obj <Object>)))
  (class String metaclass String-Class extends Sequence
    (method protected override (initialize . rest))
    (method protected override (coerce-string))
    (method protected override (compare-object obj))
    (method protected override (ci-compare-object obj))
    (method protected override (sequence-element n <fx>))
    (method protected override (sequence-set-element! n <fx> obj) <void>)
    (method protected override (sequence-cardinality) <fx>)
    (method protected override (sequence-tail n))
    (method protected override (sequence-last))
    (method protected override (sequence-butlast)))
  (definition public (=stringstring s1 <string> s2 <string>) <bool>)
  (definition public (elementstring string <string> n) <char>)
  (definition public (set-element!string string <string> n c) <void>)
  (definition public (cardinalitystring string <string>) <fx>)
  (definition public (subseqstring string <string> start end) <string>)
  (definition public (replace-subseq!string string <string> start end replacement) <string>)
  (definition public (string-for-each proc seq <string>))
  (definition public (butlaststring seq <string>) <string>)
  (definition public (string-find seq <string> target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))) <int+>)
  (definition public (string-find-in seq <string> target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))))
  (definition public (starts-with?stringstring seq <string> target <string>) <bool>)
  (definition public (ends-with?stringstring seq <string> target <string>) <bool>)
  (definition public (empty-string? object))
  (definition public (->string expr (detail (unspecified))))
  (definition public (remove-trailing-char string c))
  (definition public (value-string? object <Object>))
  (definition public (wi=? s1 <Object> s2 <Object>))
  (definition public (unique-domain-name name domain (separator: separator (unspecified))))
  (definition public (remove-numeric-suffix string))
  (definition public (compare-n x <string> y <string> max <fx> (test: test (unspecified))))
  (definition public (string-checksum str))
  (definition public (split-lines string))
  (definition public (join-lines lines))
  (definition public (append-lines . args))
  (definition public (seconds->milliseconds x))
  (definition public (milliseconds->seconds x))
  (definition public (seconds->microseconds x))
  (definition public (microseconds->seconds x))
  (class Priority-Queue extends Object
    (slot priority-count <fx>)
    (slot queue-vector <vector>)
    (slot mutex)
    (slot mutex-condition)
    (method protected override (initialize count))
    (method public final (empty?))
    (method public final (size))
    (method protected final (top-queue))
    (method public final (push obj (priority (unspecified))))
    (method public final (pop timeout)))
  (definition public (primordial-thread))
  (definition public (primordial-thread?))
  (definition public (new-thread thunk . rest))
  (definition public (thread-group-all-threads thread-group))
  (definition public (top-threads))
  (definition public (present-thread-name name))
  (definition public (present-thread-state state))
  (definition public (safe-present-object object (max-width (unspecified))))
  (definition public (safe-present-property object slot))
  (definition package (write-delayed-event thunk))
  (definition package (read-delayed-event))
  (definition public (process-delayed-events))
  (definition public current-continuation-chain)
  (definition package (thread-loop? thread))
  (definition package (thread-start-loop thread))
  (definition package (thread-stop-loop thread))
  (definition package (thread-loop))
  (definition public (start-loop-thread . rest))
  (definition package (thread-has-port? thread))
  (definition package (thread-write-message thread msg priority))
  (definition package (thread-read-message (timeout: timeout (unspecified))))
  (definition package (thread-write thread value (priority (unspecified))))
  (definition package (thread-read (timeout: timeout (unspecified))))
  (definition public (thread-process (timeout: timeout (unspecified))))
  (definition public (thread-post thread name thunk (priority (unspecified))))
  (definition public (thread-block thread name thunk (priority (unspecified))))
  (definition public (thread-execute thread name thunk (priority (unspecified))))
  (definition package (thread-call-result? result))
  (definition public (thread-call thread name thunk (priority (unspecified))))
  (definition public (thread-exit))
  (definition public (exit-thread thread))
  (definition public (sleep delay))
  (definition public (is-not? object type))
  (definition public category-identifier)
  (definition public category-descendants)
  (definition public class-ascendant)
  (definition public (category-name category))
  (definition public (category-unit category))
  (definition public (either . rest))
  (class Vector-Class extends Sequence-Class
    (method protected override (make-sequence len)))
  (class Vector metaclass Vector-Class extends Sequence
    (method protected override (initialize . rest))
    (method protected override (sequence-element n))
    (method protected override (sequence-set-element! n obj))
    (method protected override (sequence-cardinality))
    (method protected override (sequence-tail n))
    (method protected override (sequence-last))
    (method protected override (sequence-butlast)))
  (definition public (elementvector vector <vector> n) <Object>)
  (definition public (set-element!vector vector <vector> n obj) <void>)
  (definition public (cardinalityvector vector <vector>) <fx>)
  (definition public (vector-map proc vector <vector> . vectors))
  (definition public (vector-for-each proc vector <vector> . vectors))
  (class Axis-Class extends Sequence-Class
    (method protected override (make-sequence len)))
  (class Axis metaclass Axis-Class extends Sequence
    (slot size <fx> accessors generate)
    (slot content <vector> accessors generate)
    (method protected override (initialize s <fx>))
    (method protected override (print output detail))
    (method protected override (sequence-element n <fx>))
    (method protected override (sequence-set-element! n <fx> obj) <void>)
    (method protected override (sequence-cardinality) <fx>)
    (method protected override (sequence-tail n <fx>) <Axis>)
    (method protected override (sequence-last)))
  (definition public (axis . rest))
  (definition public (elementAxis axis <Axis> n))
  (definition public (set-element!Axis axis <Axis> n obj) <void>)
  (definition public (cardinalityAxis axis <Axis>) <fx>)
  (definition public (tailAxis axis <Axis> n) <Axis>)
  (definition public (lastAxis axis <Axis>))
  (definition public (insert!Axis axis <Axis> pos obj) <Axis>)
  (definition public (replace-subseq!Axis axis <Axis> start end replacement) <Axis>)
  (definition public (axis-remove! axis <Axis> element) <void>)
  (definition public (axis-adjust axis <Axis> n <fx>))
  (definition public (axis-add axis <Axis> obj))
  (definition public (allocate-axis size <fx>))
  (definition public (newcategory<Axis> class <category<Axis>> size) <Axis>)
  (definition public (axis-ref axis <Axis> n) <Object>)
  (definition public (axis-set! axis <Axis> n obj) <void>)
  (definition public (axis-cardinality axis <Axis>) <fx>)
  (definition public (axis-for-each proc seq <Axis>))
  (definition public (axis-find seq <Axis> target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))) <int+>)
  (definition public (axis-find-in seq <Axis> target (key: key (unspecified)) (test: test (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))))
  (definition public (dispatch? expr))
  (definition public (dispatch-string? str))
  (definition public (dispatch->name dispatch))
  (class Enumeration extends Class
    (slot members accessors generate)
    (method protected final (add-member member))
    (method protected override (print output readably))
    (method protected final (name->member name))
    (method protected final (value->member value))
    (method public final (name->value name))
    (method public final (value->name value))
    (method public final (bits->names bits)))
  (class Enumeration-Member metaclass Enumeration extends Object
    (slot name getter generate)
    (method protected override (initialize name))
    (method protected override (print output readably))
    (method protected virtual (get-value)))
  (definition public (enumeration? obj))
  (definition public (reference-string? str))
  (definition public (reference->name str))
  (definition public (32-bit-integer->bytes x))
  (definition public (64-bit-integer->bytes x))
  (definition public (bytes->32-bit-integer b1 b2 b3 b4))
  (definition public (bytes->64-bit-integer b1 b2 b3 b4 b5 b6 b7 b8))
  (definition public (code-string->32-bit-integer s))
  (definition public (make-u8-content size content))
  (definition public (u8-content-size content))
  (definition public (iterate-u8-content content proc))
  (definition public (read-u8-content port))
  (definition public (write-u8-content content port))
  (definition public (start-pump port proc))
  (definition public (write-binary-content port data (encoder (unspecified))))
  (definition public (read-binary-content port (decoder (unspecified))))
  (definition public (marshall obj))
  (definition public (unmarshall obj))
  (definition public (read-until test input))
  (definition public (read-string-element string))
  (definition public (read-string-content string))
  (definition public (readable-string? string))
  (definition public (read-string-safe string))
  (definition public (read-delimited-string string char))
  (definition public (require-char input))
  (definition public (skip-line input))
  (definition public (skip-whites input))
  (definition public (read-delimited input kind delimiter (allow-eof? (unspecified))))
  (definition public (string-delimiter? c))
  (definition public (read-lines input))
  (definition public (read-lines-chunked input chunk-size proc))
  (definition public (read-content-string input))
  (definition public (pipe input output))
  (definition public (textual expr (output (unspecified))))
  (definition public (describe expr (output (unspecified))))
  (definition public (fresh-line (output (unspecified))))
  (definition public (at-fresh-line? (output (unspecified))))
  (definition package (register-printer name proc))
  (definition public (with-printer printer proc))
  (definition public pp)
  (definition public (present-reference reference))
  (definition public (write-line line . rest))
  (definition public (write-lines output lines))
  (definition public (do-nothing . rest))
  (definition public (identity x))
  (definition public (const x))
  (definition public (compose f g))
  (definition public (compose* . fns))
  (class Subseq-Class extends Sequence-Class)
  (class Subseq metaclass Subseq-Class extends Sequence
    (slot sequence getter generate)
    (slot start <fx> accessors generate)
    (slot size <fx> accessors generate)
    (method protected override (initialize sequence start <fx> size <fx>))
    (method protected override (print output detail))
    (method protected override (coerce-string))
    (method protected override (sequence-element n <fx>))
    (method protected override (sequence-set-element! n <fx> obj) <void>)
    (method protected override (sequence-cardinality) <int>)
    (method protected override (sequence-subseq! s <fx> e <fx>) <Subseq>))
  (definition public (allocate-subseq sequence <string> start <fx> size <fx>))
  (definition public (newcategory<Subseq> class <category<Subseq>> sequence start size) <Subseq>)
  (definition public (offset-subseq! subseq <Subseq> offset <fx>) <void>)
  (definition public (grow-subseq! subseq <Subseq> n <fx>) <void>)
  (definition public (subseq-ref subseq <Subseq> n) <Object>)
  (definition public (subseq-set! subseq <Subseq> n obj) <void>)
  (definition public (subseq-cardinality subseq <Subseq>) <int>)
  (class Subseq$string$-Class extends Sequence-Class)
  (class Subseq$string$ metaclass Subseq$string$-Class extends Sequence
    (slot sequence <string> getter generate)
    (slot start <fx> accessors generate)
    (slot size <fx> accessors generate)
    (method protected override (initialize sequence <string> start <fx> size <fx>))
    (method protected override (print output detail))
    (method public final (print-content output))
    (method protected override (sequence-element n <fx>))
    (method protected override (sequence-set-element! n <fx> obj) <void>)
    (method protected override (sequence-cardinality) <int>)
    (method protected override (sequence-subseq! s <fx> e <fx>) <Subseq$string$>))
  (definition public (allocate-subseq$string$ sequence <string> start <fx> size <fx>))
  (definition public (newcategory<Subseq$string$> class <category<Subseq$string$>> sequence start size) <Subseq$string$>)
  (definition public (elementSubseq$string$ subseq <Subseq$string$> n) <char>)
  (definition public (set-element!Subseq$string$ subseq <Subseq$string$> n obj) <void>)
  (definition public (cardinalitySubseq$string$ subseq <Subseq$string$>) <fx>)
  (definition public (subseq!string seq <string> s e) <Subseq$string$>)
  (definition public (subseq!Subseq$string$ subseq <Subseq$string$> s e) <Subseq$string$>)
  (definition public (offset-subseq!Subseq$string$ subseq <Subseq$string$> offset) <void>)
  (definition public (grow-subseq!Subseq$string$ subseq <Subseq$string$> n) <void>)
  (definition public (values->list values))
  (definition public (registered-sites))
  (definition public (registered-site name) <Call-Site>)
  (definition public (register-site name properties))
  (definition public (get-site-callback))
  (definition public (set-site-callback callback))
  (definition public (call-site-ref name))
  (definition public (call-site-set! name value)))
