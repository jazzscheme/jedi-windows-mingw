(module jazz.editor.lisp.text.Lisp-Explorer jazz
  (import (jazz.editor.jazz))
  (import (jazz.editor.lisp))
  (import (jazz.library))
  (import (jazz.ui))
  (class Lisp-Explorer extends Code-Explorer
    (slot find-comment-last-row <fx+>)
    (slot find-comment-last-col <fx+>)
    (definition public Composites)
    (definition public Open-Composites)
    (definition public Close-Composites)
    (method protected final (explore-error message start end))
    (method protected final (present-char c))
    (method public final (current-expr))
    (method protected override (forward-expr))
    (method protected override (backward-expr))
    (method protected final (forward-simple-expr))
    (method protected final (backward-simple-expr))
    (method public final (forward-all-expr))
    (method public final (backward-all-expr))
    (method protected override (forward-constituent))
    (method protected override (backward-constituent))
    (method protected final (backward-escaped-symbol))
    (method protected final (backward-scheme-char))
    (method protected final (forward-expr-comment))
    (method protected final (forward-named-comment))
    (method protected final (forward-multiline-comment))
    (method protected final (backward-multiline-comment))
    (method protected final (forward-sharp))
    (method protected final (forward-backslahed-symbol))
    (method protected final (forward-escaped-symbol))
    (method protected virtual (forward-delimited-string))
    (method protected final (backward-delimited-string))
    (method protected virtual (forward-syntax-string))
    (method protected final (backward-syntax-string))
    (method protected final (forward-named-string))
    (method protected final (forward-scheme-char))
    (method protected final (forward-string))
    (method protected final (backward-string))
    (method protected final (forward-composite knd <Object> delimiter))
    (method protected final (backward-composite knd <Object> delimiter))
    (method public final (enter-list))
    (method public final (exit-list))
    (method public final (enter-composite))
    (method public final (exit-composite))
    (method public final (skip-forward name <string>))
    (method public final (skip-backward name <string>))
    (method public final (forward-modifiers modifiers))
    (method protected final (forward-comments))
    (method protected final (backward-comments))
    (method public final (forward-whites) <void>)
    (method public final (backward-whites) <void>)
    (method protected final (backward-lisp-comment) <bool>)
    (method protected override (outer-expr (atomic?: atomic? (unspecified)) (explore-whitespace?: explore-whitespace? (unspecified)) (uniform-style?: uniform-style? (unspecified))))
    (method public final (form-expr))
    (method public final (form-name form))
    (method public virtual (namespace-expr?))
    (method public virtual (declaration-expr?))
    (method public virtual (namespace-name? name))
    (method public virtual (declaration-name? name))
    (method public virtual (inner-name? name))
    (method public final (declaration-modifiers/name))
    (method protected final (declaration-name))
    (method protected virtual (find-expression-syntax symbol))
    (method public final (for-each-comment proc <procedure> (start-line: start-line (unspecified)) (end-line: end-line (unspecified))))
    (method public virtual (walk-declarations context <Lisp-Entry+> declaration keyword expression doc))
    (method public virtual (walk-declaration context <Lisp-Entry+> declaration keyword expression doc))
    (method protected virtual (walk-named-declaration context <Lisp-Entry+> symbol form declaration keyword expression doc))
    (method protected virtual (find-named-walker name))
    (method protected final (walk-parameters context <Lisp-Entry+> declaration keyword expression doc))
    (method protected final (walk-unknown context <Lisp-Entry+> symbol form declaration keyword expression doc))
    (method public final (iterate-expressions proc (mode: mode (unspecified)) (recursive?: recursive? (unspecified))))
    (method public final (iterate-expression proc (mode: mode (unspecified)) (recursive?: recursive? (unspecified))))
    (method protected final (for-each-expressions proc mode))
    (method protected final (for-each-expression proc mode))
    (method public final (walk-expressions context <Lisp-Entry+> expression (mode (unspecified)) (first? (unspecified))))
    (method protected final (walk-expression context <Lisp-Entry+> expression mode first?))
    (method protected final (walk-specifier context <Lisp-Entry+> expression mode))
    (method public final (constant?))
    (method public final (get-constant))
    (method public final (search-expressions mode search-context <Search-Set> position whole-words? ignore-case?))
    (method protected final (match? expl-mode target))
    (method protected final (open-composite? char))
    (method protected final (close-composite? char))
    (method protected final (composite-kind? kind))))
